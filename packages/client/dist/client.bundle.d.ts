// Generated by dts-bundle-generator v8.0.1

import { Component, IWorld } from 'bitecs';

export type Prefab = (world: IWorld, params: object) => number;
export type PrefabMap = Map<string, Prefab>;
export type Serializer = (world: IWorld, eid: number) => any;
export type Deserializer = (world: IWorld, eid: number, data: any) => void;
export type NetworkDeserializer = (world: IWorld, eid: number, data: any) => void;
export type DiffChecker = (world: IWorld, eid: number, cache: any) => boolean;
export type Serializers = {
	deserializer: Deserializer;
	diffChecker: DiffChecker;
	networkDeserializer: NetworkDeserializer;
	serializer: Serializer;
};
export type SerializersMap = Map<string, Serializers>;
export type SerializerKeyMap = Map<Component, string>;
export type SystemParams = {
	prefabs: PrefabMap;
	serializerKeys: SerializerKeyMap;
	serializers: SerializersMap;
};
export type System = (world: IWorld, params: SystemParams) => void;
export declare class App {
	private systems;
	private systemParams;
	private prefabs;
	private serializers;
	private serializerKeys;
	private canvas;
	private world;
	private adapter;
	readonly userId: string;
	constructor(params?: {
		canvas?: HTMLCanvasElement;
		userId?: string;
	});
	private init;
	registerSystem(system: System, orderPriority?: number): void;
	deregisterSystem(system: System): void;
	getSystemOrderPriority(system: System): number;
	registerPrefab(key: string, prefab: Prefab): void;
	registerSerializers(key: string, component: Component | null, serializers: Serializers): void;
	tick(): void;
	start(): void;
	getCanvas(): HTMLCanvasElement;
	getWorld(): IWorld;
}

export {};
